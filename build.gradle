plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}

apply plugin: "me.modmuss50.mod-publish-plugin"

version = "${mod_version}+${mc_version}"
group = "com.telepathicgrunt"
archivesBaseName = "${modid}_neoforge"

repositories {
    mavenLocal()
}

base {
    archivesName = archivesBaseName
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
	client {
		modSource project.sourceSets.main 
	}

	server {
		modSource project.sourceSets.main
        programArgument '--nogui'
	}
}
	
repositories {
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/maven.gradle'

String changelogText = file("CHANGELOG.md").getText('UTF-8')
Map<String, String> env = System.getenv()

publishMods {
    file = jar.archiveFile
    type = STABLE

    displayName =  "CommandStructures-Neoforge v${project.mod_version} (${project.mc_version} MC)"
    version = project.version + "_neoforge"

    changelog = changelogText
    modLoaders.add("neoforge")

    if (env.CURSEFORGEKEY) {
        curseforge {
            accessToken = env.CURSEFORGEKEY
            projectId = '565119'
            minecraftVersions.add("1.21")
        }
    }

    if (env.MODRINTH_TOKEN) {
        modrinth {
            accessToken = env.MODRINTH_TOKEN
            projectId = 'WEfvvlnl'
            minecraftVersions.add("1.21")
        }
    }
}

task buildAndRelease {}
tasks.publish.mustRunAfter tasks.build
tasks.publishMods.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.publish, tasks.publishMods)
